package com.google.interview.questions.arrays;

/**
 * An Efficient approach is to think
 * greedily. If we visualize the problem
 * then we will get to know that largest
 * permutation can only be obtained if
 * it starts with n and continues with
 * n-1, n-2,…. So we just need to put
 * the 1st, 2nd, 3rd, …, kth largest
 * element to their respective position.
 * 
 * @author VijaySidhu
 *
 */
public class KSwapPermutation {

	kPermutation(){
		for(int i=0;i<N&&swaps<K;i++)
        {
        	long big=arr[i];
        	int pos=i;
        	boolean check=false;
        	for(int j=i+1;j<N;j++)
        	{
        		
        		if(big<arr[j])
        		{
        			big=arr[j];
        			pos=j;
        			check=true;
        		}
        		
        	}
        	if(check){
        		long temp;
        		temp=arr[i];
        		arr[i]=arr[pos];
        		arr[pos]=temp;
        		swaps++;
        	}
        
        	
        }
        for(int i=0;i<N;i++)
        {
        	System.out.print(arr[i]+" ");
        }
	}

}
