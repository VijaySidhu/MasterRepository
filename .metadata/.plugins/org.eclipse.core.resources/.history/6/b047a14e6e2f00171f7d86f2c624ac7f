package com.google.interview.questions.linkedlist;

public class Practice {

	// Nth TO last

	void printNthFromLast(Node head, int n) {
		Node p1 = head;
		Node p2 = head;

		while (n > 0 && p2.next != null) {
			if (p2 == null) {
				return;
			}
			p2 = p2.next;
			n--;
		}
		// Not After above loop p2 is at n-1, now move both pointers until p2 reaches end
		while (p2.next == null) {
			p1 = p1.next;
			p2 = p2.next;
		}
		System.out.println(p1.data);

	}

	// Delete Alternate

	void deleteAlt(Node node) {
		if (node == null) {
			return;
		}
		if (node.next == null) {
			return;
		}
		if (node.next.next != null)
			node.next = node.next.next;
		deleteAlt(node.next);

	}

	// Delete Node at given Position
	static Node deleteNode(Node node, int position) {
		if (position == 0) {
			Node head;
			return head = node.next;
		}

		int counter = 0;
		Node temp = node;
		while (temp != null && counter < position - 1) {
			temp = temp.next;
			counter++;
		}

		return temp.next = temp.next.next;

	}

	// Reverse whole

	public static ListNode reverse(ListNode curr, ListNode prev) {
		ListNode head = null;
		if (curr.next == null) {
			head = curr;
			curr.next = prev;
			return head;
		}
		ListNode next = curr.next;
		curr.next = prev;
		reverse(head,next, curr);
		return head;
	}

	// Reverse Pairs

	// Find Cycle

	// Find Middle

	// Sorted Insertion

	// Random Number picker

}
