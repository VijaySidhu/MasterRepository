package com.google.interview.questions.sorting;

import com.google.interview.questions.ScanNumbers;

/**
 * Time Complexity of this is Best Case :: O(n) his time complexity can occur if
 * the array is already sorted, and that means that no swap occurred and only 1
 * iteration of n elements Worst Case :: O(n^2) If array is sorted in descending
 * Average Case :: O(n^2) order Space Complexity :: O(1)
 * 
 *      OR
 *      
 * Given an array of length N and an integer K, sort the array as much as possible such that no element travels more than k positions 
 * to its left - an element however can travel as much as it likes to its right.
 * Answer : The outer loop will run for K times. So only the smallest integer would be shifted a maximum of k times to the left.
 * 
 * @author VijaySidhu
 *
 */
public class BubbleSort {
	public static void main(String[] args) {
		BubbleSort bubblersort = new BubbleSort();
		/**
		 * Scan Input from Console
		 */
		int[] scannedArray = ScanNumbers.getScannedNumbersArray();
		System.out.println(scannedArray.length);
		/**
		 * Implement Bubble Sort
		 */
		ScanNumbers.printArray(bubblersort.bubbleSort(scannedArray), "Sorted with Bubble Sort");
	}

	private int[] bubbleSort(int[] array) {
		int n = array.length-1;
		for(int i = 0;i<=n;i++){
			
		}
		return null;
		/*int[] sortedArray = null;
		int n = array.length - 1;
		for (int k = n + 1; k >= 0; k--) {
			for (int i = 0; i < n; i++) {
				if (array[i] > array[i + 1]) {
					sortedArray = ScanNumbers.swapNumbers(i, i + 1, array);
				}
			}
		}
		return sortedArray;*/
	}

}
