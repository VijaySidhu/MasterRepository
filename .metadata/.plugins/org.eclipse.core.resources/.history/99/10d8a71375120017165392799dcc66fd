package com.google.interview.questions.stacks;

/**
 * Algorithm 1. Scan the infix
 * expression from left to right. 2. If
 * the scanned character is an operand,
 * output it. 3. Else, …. .3.1 If the
 * precedence of the scanned operator is
 * greater than the precedence of the
 * operator in the stack(or the stack is
 * empty), push it. …. .3.2 Else, Pop
 * the operator from the stack until the
 * precedence of the scanned operator is
 * less-equal to the precedence of the
 * operator residing on the top of the
 * stack. Push the scanned operator to
 * the stack. 4. If the scanned
 * character is an ‘(‘, push it to the
 * stack. 5. If the scanned character is
 * * an ‘)’, pop and output from the
 * stack * until an ‘(‘ is encountered.
 * 6. Repeat steps 2-6 until infix
 * expression is scanned. 7. Pop and
 * output from the stack until it is not
 * empty.
 * 
 * @author VijaySidhu
 */
public class InFixToPostFix {

	private static final char ADD = '+', SUBTRACT = '-';
	private static final char MULTIPLY = '*', DIVIDE = '/';
	private static final char POWER = '^';

	private boolean isOperator(char c) {

		return c == '+' || c == '-' || c == '*' || c == '/' || c == '^' || c == '(' || c == ')';

	}

	private boolean isSpace(char c) { // Tell whether c is a space.

		return (c == ' ');

	}

	private boolean lowerPrecedence(char op1, char op2) {
		// Tell whether op1 has lower precedence than op2, where op1 is an
		// operator on the left and op2 is an operator on the right.
		// op1 and op2 are assumed to be operator characters (+,-,*,/,^).

		switch (op1) {

		case '+':
		case '-':
			return !(op2 == '+' || op2 == '-');

		case '*':
		case '/':
			return op2 == '^' || op2 == '(';

		case '^':
			return op2 == '(';

		case '(':
			return true;

		default: // (shouldn't happen)
			return false;
		}

	} // end lowerPrecedence

	// Method to convert infix to postfix:

	public String convertToPostfix(String infix) {
		Stack operatorStack = new Stack();
		char c;
		StringTokenizer parser = new StringTokenizer(infix, "+-*/^() ", true);
		StringBuffer postfix = new StringBuffer(infix.length());
		while (parser.hasMoreTokens()) {
			String token = parser.nextToken();
			c = token.charAt(0);
			if ((token.length() == 1) && isOperator(c)) {
				while (!operatorStack.empty() && !lowerPrecedence(((String) operatorStack.peek()).charAt(0), c))

					postfix.append(" ").append((String) operatorStack.pop());
				if (c == ')') {
					String operator = (String) operatorStack.pop();
					while (operator.charAt(0) != '(') {
						postfix.append(" ").append(operator);
						operator = (String) operatorStack.pop();
					}
				} else
					operatorStack.push(token);
			} else if ((token.length() == 1) && isSpace(c)) {
			} else {
				postfix.append(" ").append(token);
			}
		}
		while (!operatorStack.empty())
			postfix.append(" ").append((String) operatorStack.pop());

		return postfix.toString();
	}

}
