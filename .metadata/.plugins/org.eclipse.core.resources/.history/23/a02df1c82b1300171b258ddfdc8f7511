package com.google.interview.questions.arrays;

import java.util.ArrayList;
import java.util.List;
import java.util.PriorityQueue;

/**
 * O(N log k) N is the total number of
 * integers. k is the number of arrays.
 * Heap Priority Queue
 * 
 * @author VijaySidhu
 *
 */
public class MergeKSortedArrays {
	
	public class Node {
		int val, x, y;

		public Node(int val, int x, int y) {
			this.val = val;
			this.x = x;
			this.y = y;
		}
	}
	
	public List<Integer> mergekSortedArrays(int[][] arrays) {
        List<Integer> rst = new ArrayList<Integer>();
        if (arrays == null || arrays.length == 0) {
            return rst;
        }
        
        PriorityQueue<Node> queue = new PriorityQueue(arrays.length,
            new Comparator<Node>() {
                public int compare(Node a, Node b){
                    return a.val - b.val;
                }
            }
        );
        
        //init
        for (int i = 0; i < arrays.length; i++) {
            if (arrays[i].length != 0) {
                queue.offer(new Node(arrays[i][0], i, 0));
            }
        }
        
        Node node;
        
        while (!queue.isEmpty()) {
            node = queue.poll();
            rst.add(node.val);
            if (node.y < arrays[node.x].length - 1) {
                queue.offer(new Node(arrays[node.x][node.y + 1], node.x, node.y + 1));
            }   
        }
        
        return rst;

    }
}
