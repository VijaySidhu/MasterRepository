package com.google.interview.questions.string;

/**
 * Smallest length string with repeated
 * replacement of two distinct adjacent
 * Given a string of any combination of
 * three letters ‘a’, ‘b’, and ‘c’, find
 * length of the smallest string that
 * can be obtained by applying the
 * following operation repeatedly: Take
 * any two adjacent, distinct characters
 * and replace them with the third.
 * 
 * @author VijaySidhu
 *
 */
public class StringReduction {
	int DP[][][] = new int[110][110][110];

	int stringReduction(String str) {
		int n = str.length();
		// Count occurance of three chars
		int count[] = new int[3];
		for (int i = 0; i <= n; i++) {
			count[str.charAt(i) - 'a']++;
		}
		// Initialize dynamic programming entries by -1
		for (int i = 0; i <= count[0]; i++) {
			for (int j = 0; j <= count[1]; j++) {
				for (int k = 0; k <= count[2]; k++) {
					DP[i][j][k] = -1;
				}
			}

		}
		return length(count[0], count[1], count[2]);
	}

	int length(int a, int b, int c) {

		// If there is only one type of character
		if (a == 0 && b == 0)
			return DP[a][b] = c;
		if (a == 0 && c == 0)
			return DP[a][b] = b;
		if (b == 0 && c == 0)
			return (DP[a][b] = a);

		// If only two types of characters are present
		if (a == 0)
			return (DP[a][b] = length(a + 1, b - 1, c - 1));
		if (b == 0)
			return (DP[a][b] = length(a - 1, b + 1, c - 1));
		if (c == 0)
			return (DP[a][b] = length(a - 1, b - 1, c + 1));

		// If all types of characters are present.
		// Try combining all pairs.
		return (DP[a][b] = min(length(a - 1, b - 1, c + 1), min(length(a - 1, b + 1, c - 1), length(a + 1, b - 1, c - 1))));

	}
}
