package com.google.interview.questions.arrays;

/**
 * An Efficient Solution is based on the
 * fact that sum of a subarray (or
 * window) of size k can be obtained in
 * O(1) time using sum of previous
 * subarray (or window) of size k.
 * Except first subarray of size k, for
 * other subarrays, we compute sum by
 * removing first element of last window
 * and adding last element of current
 * window. O(n)
 * 
 * The changing condition for dynamic
 * programming is
 * "We should ignore the sum of the previous n-1 elements if nth element is greater than the sum."
 * 
 * @author VijaySidhu
 *
 */
public class MaxMinSumSubArray {

	static int maxSum(int A[], int n, int k) {

		int max = A[0];
		int[] sum = new int[A.length];
		sum[0] = A[0];
 
		for (int i = 1; i < A.length; i++) {
			sum[i] = Math.max(A[i], sum[i - 1] + A[i]);
			max = Math.max(max, sum[i]);
		}
 
		return max;
	}

	public static void main(String[] args) {
		int arr[] = { -2,1,-3,4,-1,2,1,-5,4 };
		int k = 4;
		int n = arr.length;
		System.out.println(maxSum(arr, n, k));
	}

}
