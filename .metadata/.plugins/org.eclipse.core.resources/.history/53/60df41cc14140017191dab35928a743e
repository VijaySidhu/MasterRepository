package com.google.interview.questions.arrays;

import java.util.PriorityQueue;

/**
 * Average case time is O(n), worst case is O(n*n) Quick Select algorithm
 * @author VijaySidhu
 *
 */
public class KthLargest {

	public static int findKthLargest(int[] nums, int k) {
		if (k < 1 || nums == null) {
			return 0;
		}

		return getKth(nums.length - k + 1, nums, 0, nums.length - 1);
	}

	public static int getKth(int k, int[] nums, int start, int end) {
		int pivot = nums[end];
		int left = start;
		int right = end;
		while (true) {
			while (nums[left] < pivot && left < right) {
				left++;
			}

			while (nums[right] >= pivot && right > left) {
				right--;
			}

			if (left == right) {
				break;
			}

			swap(nums, left, right);
		}

		swap(nums, left, end);

		if (k == left + 1) {
			return pivot;
		} else if (k < left + 1) {
			return getKth(k, nums, start, left - 1);
		} else {
			return getKth(k, nums, left + 1, end);
		}
	}

	public static void swap(int[] nums, int n1, int n2) {
		int tmp = nums[n1];
		nums[n1] = nums[n2];
		nums[n2] = tmp;
	}
	/**
	 * Min Heap Approach
	 * Time complexity is O(nlog(k)). Space complexity is O(k) 
	 * @param args
	 */
	
	static public int findKthLargestMinHeap(int[] nums, int k) {
	    PriorityQueue<Integer> q = new PriorityQueue<Integer>(k);
	    for(int i: nums){
	        q.offer(i);
	 
	        if(q.size()>k){
	            q.poll();
	        }
	    }
	 
	    return q.peek();
	}
	
	public static void main(String[] args) {
		int[] a={1,2,3,4,10,5};
		// Quick Select
		System.out.println(findKthLargest(a,4));
		// Min Heap
		System.out.println(findKthLargestMinHeap(a,4));
	}

}
