package com.google.interview.questions.graphs;

import java.util.Set;
import java.util.Stack;

import com.sun.corba.se.impl.orbutil.graph.Graph;

import scala.collection.immutable.HashSet;

public class AllPaths {

	// current path
	private Stack<String> path = new Stack<String>();
	// Set of vertices on path
	private Set<String> onPath = new java.util.HashSet<String>();

	public AllPaths(Graph G, String s, String t) {
		enumerate(G, s, t);
	}

	// use DFS
	private void enumerate(Graph G, String v, String t) {

        // add node v to current path from s
        path.push(v);
        onPath.add(v);

        // found path from s to t - currently prints in reverse order because of stack
        if (v.equals(t)) 
            StdOut.println(path);
        System.out.println(path);

        // consider all neighbors that would continue path with repeating a node
        else {
            for (String w : G.adjacentTo(v)) {
                if (!onPath.contains(w)) enumerate(G, w, t);
            }
        }

        // done exploring from v, so remove from path
        path.pop();
        onPath.delete(v);
    }

}
