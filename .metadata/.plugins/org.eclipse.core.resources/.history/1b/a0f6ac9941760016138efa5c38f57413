package com.google.interview.questions;

import com.google.interview.questions.trees.BinarySearchTree;

public class OperationsOnBinSearchTree {

	public static void main(String[] args) {
		OperationsOnBinSearchTree op = new OperationsOnBinSearchTree();
		op.find(25);
		op.insert(15);
		op.delete(30);
	}

	/**
	 * Its very sim­ple oper­a­tion to perform. start from the root and com­pare
	 * root.data with n if root.data is greater than n that means we need to go
	 * to the left of the root. if root.data is smaller than n that means we
	 * need to go to the right of the root. if any point of time root.data is
	 * equal to the n then we have found the node, return true. if we reach to
	 * the leaves (end of the tree) return false, we didn’t find the element
	 * 
	 * Find id in binary search tree Whenever divide by 2 approach is taken time
	 * complexity is in log In this Avg case O(log n) Worst Case O(n) Space O(n)
	 * 
	 */
	public boolean find(int id) {
		BinarySearchTree bst = BinarySearchTree.createBinarySearchTree();
		BinarySearchTree current = bst;
		while (current != null) {
			if (current.data == id) {
				return true;
			} else if (current.data > id) {
				current = current.left;
			} else {
				current = current.right;
			}

		}
		return false;
	}

	/**
	 * To insert a node our first task is to find the place to insert the node.
	 * Take cur­rent = root . start from the cur­rent and com­pare root.data
	 * with n if current.data is greater than n that means we need to go to the
	 * left of the root. if current.data is smaller than n that means we need to
	 * go to the right of the root. if any point of time cur­rent is null that
	 * means we have reached to the leaf node, insert your node here with the
	 * help of par­ent node. Time Complexity O(logn) Worst Case = O(n) Space
	 * O(n)
	 */
	public boolean insert(int id) {
		BinarySearchTree newNode = new BinarySearchTree(id);
		BinarySearchTree root = BinarySearchTree.createBinarySearchTree();
		BinarySearchTree current = root;
		BinarySearchTree parent = null;
		// If there is no node in tree
		if (current == null) {
			current = newNode;
			return true;
		}
		// find place for new node and insert
		while (true) {
			parent = current;
			if (id < current.data) {
				current = current.left;
				if (current == null) {
					parent.left = newNode;
					DisplayTree.display(root);
					return true;
				}
			} else {
				current = current.right;
				if (current == null) {
					parent.right = newNode;
					DisplayTree.display(root);
					return true;
				}
			}

		}
	}

	/**
	 *         Three different Cases
	 * 1. Node to be deleted is a leaf node ( No Children). 
	 * 2. Node to be deleted has only one child. 
	 * 3. Node to be deleted has two childrens.
	 * 
	 * Case1: Traverse Tree Keep Track of parent and find if set parent.left or parent.right to NULL
	 * Case2: If a node to be deleted(deleteNode) has only one child then just tra­verse to that node, keep track of par­ent node 
	 * and the side in which the node exist(left or right). check which side child is null (since it has only one child).Say node to 
	 * be deleted has child on its left side . Then take the entire sub tree from the left side and add it to the par­ent and the side on which deleteN­ode exist
	 * Case 3: Find Successor- Suc­ces­sor is the smaller node in the right sub tree of the node to be deleted. Successor will replace deleted Node
	 */
	public void delete(int id) {
		BinarySearchTree root = BinarySearchTree.createBinarySearchTree();
		BinarySearchTree current = root;
		BinarySearchTree parent = root;
		boolean isLeftChild = true;
		while (current.data != id) {
			parent = current;
			// Left Subtree
			if (current.data > id) {
				isLeftChild = true;
				current = current.left;
			}
			// Right subtree
			else {
				isLeftChild = false;
				current = current.right;
			}
			if (current == null) {
				return;
			}

		}
		// Case 1: If node to be deleted has no children

		if (current.left == null && current.right == null) {
			if (current == root) {
				root = null;
			}
			if (isLeftChild) {
				parent.left = null;
				System.out.println("No Children Case");
				DisplayTree.display(root);

			} else {
				parent.right = null;
				System.out.println("No Children Case");
				DisplayTree.display(root);
			}

		}
		// Case 2: If node to be deleted has 1 child
		else if (current.right == null) {
			if (current == root) {
				root = current.left;
			} else if (isLeftChild) {
				parent.left = current.left;
			} else {
				parent.right = current.left;
			}
		} else if (current.left == null) {
			if (current == root) {
				root = current.right;
			} else if (isLeftChild) {
				parent.left = current.right;
				System.out.println("One Left Child Case::");
				DisplayTree.display(root);
			} else {
				parent.right = current.right;
				System.out.println("One Right Child Case::");
				DisplayTree.display(root);
			}
		} else if (current.left != null && current.right != null) {
			// We have found minimum element of right subtree
			BinarySearchTree successor = getSuccessor(current);
			if (current == root) {
				root = successor;
			} else if (isLeftChild) {
				parent.left = successor;
			} else {
				parent.right = successor;
			}
			successor.left = current.left;
			System.out.println("Root Node Case:: ");
			DisplayTree.display(root);

		}
	}

	BinarySearchTree getSuccessor(BinarySearchTree deletionNode) {
		BinarySearchTree successsor = null;
		BinarySearchTree successsorParent = null;
		BinarySearchTree current = deletionNode.right;
		while (current != null) {
			successsorParent = successsor;
			successsor = current;
			current = current.left;
		}
		// check if successor has the right child, it cannot have left child for
		// sure
		// if it does have the right child, add it to the left of
		// successorParent.
		// successsorParent
		if (successsor != deletionNode.right) {
			successsorParent.left = successsor.right;
			successsor.right = deletionNode.right;
		}
		return successsor;
	}

}
