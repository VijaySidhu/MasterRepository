package com.google.interview.questions.arrays;

/**
 * An Efficient approach is to think
 * greedily. If we visualize the problem
 * then we will get to know that largest
 * permutation can only be obtained if
 * it starts with n and continues with
 * n-1, n-2,…. So we just need to put
 * the 1st, 2nd, 3rd, …, kth largest
 * element to their respective position.
 * 
 * @author VijaySidhu
 *
 */
public class KSwapPermutation {

	void KswapPermutation(int arr[], int n, int k)
	{
	    // Auxiliary dictionary of storing the position
	    // of elements
	    int pos[n+1];
	 
	    for (int i = 0; i < n; ++i)
	        pos[arr[i]] = i;
	 
	    for (int i=0; i<n && k; ++i)
	    {
	        // If element is already i'th largest,
	        // then no need to swap
	        if (arr[i] == n-i)
	            continue;
	 
	        // Find position of i'th largest value, n-i
	        int temp = pos[n-i];
	 
	        // Swap the elements position
	        pos[arr[i]] = pos[n-i];
	        pos[n-i] = i;
	 
	        // Swap the ith largest value with the
	        // current value at ith place
	        swap(arr[temp], arr[i]);
	 
	        // decrement number of swaps
	        --k;
	    }

}
