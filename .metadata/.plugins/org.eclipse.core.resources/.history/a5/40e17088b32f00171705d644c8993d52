package com.google.interview.questions.trees;

import java.util.LinkedList;
import java.util.Queue;

/**
 * Approache 1 but all tree has to be
 * traverse h = Height of Tree n =
 * Number of nodes in the Tree if(n =
 * 2^h -1) return true else return false
 * 
 * Approach 2 with queue
 * 1. Do Breadth First Traverse with queue
 * 2. Take global flag to detect if both child are present or not
 * 3. Check if both childs are present to root and add left and right to queue, return false if both child are not seen
 * 
 * @author VijaySidhu
 *
 */
public class IsBinaryTreeComplete {

	
	public boolean isCompleteBinaryTree(TreeNode root) {
		if (root == null) {
			return true;
		}
		Queue<TreeNode> queue = new LinkedList<TreeNode>();
		boolean bothChildNotSeen = false;
		queue.add(root);
		while (!queue.isEmpty()) {
			TreeNode currentNode = queue.remove();
			// If it has two childs
			if ((currentNode.left != null) && (currentNode.right != null)) {

				if (bothChildNotSeen) {
					return false;
				}
				queue.add(currentNode.left);
				queue.add(currentNode.right);
			}
			// If missing right child
			if ((currentNode.left != null) && (currentNode.right == null)) {
				if (bothChildNotSeen) {
					return false;
				}
				bothChildNotSeen = true;
				queue.add(currentNode.left);
			}
			// If missing leftChild
			if ((currentNode.left == null) && (currentNode.right != null)) {
				if (bothChildNotSeen) {
					return false;
				}
				bothChildNotSeen = true;
				queue.add(currentNode.right);
			}

		}

		return true;
	}

}
