{
  "_args": [
    [
      "nforce",
      "C:\\workspace-sts-3.7.release\\MasterRepository\\NforceWrapperPoc"
    ]
  ],
  "_from": "nforce",
  "_id": "nforce@1.3.3",
  "_inCache": true,
  "_installable": true,
  "_location": "/nforce",
  "_phantomChildren": {},
  "_requested": {
    "name": null,
    "raw": "nforce",
    "rawSpec": "nforce",
    "scope": null,
    "spec": "C:\\workspace-sts-3.7.release\\MasterRepository\\NforceWrapperPoc\\nforce",
    "type": "directory"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "file:nforce",
  "_shasum": "9822dce436c2bf4562b8ead5c3ae503cb79f8ad0",
  "_shrinkwrap": null,
  "_spec": "nforce",
  "_where": "C:\\workspace-sts-3.7.release\\MasterRepository\\NforceWrapperPoc",
  "author": {
    "email": "kevnohara80@gmail.com",
    "name": "Kevin O'Hara",
    "url": "http://kevinmohara.com"
  },
  "bugs": {
    "url": "http://github.com/kevinohara80/nforce/issues"
  },
  "dependencies": {
    "bluebird": "^2.3.11",
    "faye": "1.1.0",
    "lodash": "^3.10.1",
    "mime": "1.2.11",
    "request": "^2.49.0"
  },
  "description": "nforce is a REST API wrapper for force.com, database.com, and salesforce.com",
  "devDependencies": {
    "body-parser": "1.0.2",
    "cookie-parser": "1.0.1",
    "express": "4.1.1",
    "express-session": "1.0.4",
    "gulp": "^3.9.0",
    "gulp-jshint": "^1.9.0",
    "jade": "1.3.1",
    "jshint-stylish": "^2.1.0",
    "mocha": "^2.2.5",
    "run-sequence": "^1.0.2",
    "should": "3.3.1"
  },
  "engines": {
    "node": "*"
  },
  "gitHead": "3880beaa077bb6b0ab4c62084324ca24d8c25a0b",
  "homepage": "https://github.com/kevinohara80/nforce#readme",
  "keywords": [
    "api",
    "database.com",
    "force.com",
    "forcedotcom",
    "rest",
    "salesforce",
    "salesforce.com",
    "sfdc"
  ],
  "license": {
    "type": "MIT",
    "url": "http://opensource.org/licenses/MIT"
  },
  "main": "index.js",
  "name": "nforce",
  "optionalDependencies": {},
  "readme": "nforce :: node.js salesforce REST API wrapper\r\n======\r\n\r\n[![Build Status](https://secure.travis-ci.org/kevinohara80/nforce.png)](http://travis-ci.org/kevinohara80/nforce)\r\n\r\n**nforce** is node.js a REST API wrapper for force.com, database.com,\r\nand salesforce.com.\r\n\r\n## Features\r\n\r\n* Simple api\r\n* Intelligent sObjects\r\n* Helper OAuth methods\r\n* Simple streaming\r\n* Multi-user design with single user mode\r\n* Plugin support\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm install nforce\r\n```\r\n\r\n## Usage\r\n\r\nRequire **nforce** in your app and create a client connection to a\r\nSalesforce Remote Access Application.\r\n\r\n```js\r\nvar nforce = require('nforce');\r\n\r\nvar org = nforce.createConnection({\r\n  clientId: 'SOME_OAUTH_CLIENT_ID',\r\n  clientSecret: 'SOME_OAUTH_CLIENT_SECRET',\r\n  redirectUri: 'http://localhost:3000/oauth/_callback',\r\n  apiVersion: 'v27.0',  // optional, defaults to current salesforce API version\r\n  environment: 'production',  // optional, salesforce 'sandbox' or 'production', production default\r\n  mode: 'multi' // optional, 'single' or 'multi' user mode, multi default\r\n});\r\n```\r\n\r\nNow we just need to authenticate and get our salesforce OAuth\r\ncredentials. Here is one way to do this in multi-user mode...\r\n\r\n```js\r\n// multi user mode\r\nvar oauth;\r\norg.authenticate({ username: 'my_test@gmail.com', password: 'mypassword'}, function(err, resp){\r\n  // store the oauth object for this user\r\n  if(!err) oauth = resp;\r\n});\r\n```\r\n\r\n...or in single-user mode...\r\n\r\n```js\r\n// single-user mode\r\norg.authenticate({ username: 'my_test@gmail.com', password: 'mypassword'}, function(err, resp){\r\n  // the oauth object was stored in the connection object\r\n  if(!err) console.log('Cached Token: ' + org.oauth.access_token)\r\n});\r\n```\r\n\r\nNow we can go nuts. **nforce** has an salesforce sObject factory\r\nmethod that creates records for you. Let's use that and insert a\r\nrecord...\r\n\r\n```js\r\nvar acc = nforce.createSObject('Account');\r\nacc.set('Name', 'Spiffy Cleaners');\r\nacc.set('Phone', '800-555-2345');\r\nacc.set('SLA__c', 'Gold');\r\n\r\norg.insert({ sobject: acc, oauth: oauth }, function(err, resp){\r\n  if(!err) console.log('It worked!');\r\n});\r\n```\r\n\r\nIf you are in single-user mode, the `oauth` argument can be ommitted\r\nsince it's cached as part of your connection object.\r\n\r\n```js\r\norg.insert({ sobject: acc }, function(err, resp){\r\n  if(!err) console.log('It worked!');\r\n});\r\n```\r\n\r\nQuerying and updating records is super easy. **nforce** wraps\r\nAPI-queried records in a special object. The object caches field\r\nupdates that you make to the record and allows you to pass the\r\nrecord directly into the update\r\nmethod without having to scrub out the unchanged fields. In the\r\nexample below, only the Name and Industry fields will be sent in the\r\nupdate call despite the fact that the query returned other fields\r\nsuch as BillingCity and CreatedDate.\r\n\r\n```js\r\nvar q = 'SELECT Id, Name, CreatedDate, BillingCity FROM Account WHERE Name = \"Spiffy Cleaners\" LIMIT 1';\r\n\r\norg.query({ query: q }, function(err, resp){\r\n\r\n  if(!err && resp.records) {\r\n\r\n    var acc = resp.records[0];\r\n    acc.set('Name', 'Really Spiffy Cleaners');\r\n    acc.set('Industry', 'Cleaners');\r\n\r\n    org.update({ sobject: acc, oauth: oauth }, function(err, resp){\r\n      if(!err) console.log('It worked!');\r\n    });\r\n\r\n  }\r\n});\r\n```\r\n\r\n## Using the Example Files\r\n\r\nMost of the files in the examples directory can be used by simply\r\nsetting two environment variables then running the files. The two\r\nenvironment variables are `SFUSER` and `SFPASS` which are your\r\nSalesforce.com username and passsword, respectively. Example below:\r\n\r\n```bash\r\n$ export SFUSER=myusername@salesforce.com\r\n$ export SFPASS=mypassword\r\n$ node examples/crud.js\r\n```\r\n\r\n## Authentication\r\n\r\n**nforce** supports three Salesforce OAuth 2.0 flows,\r\nusername/password, Web Server and User-Agent.\r\n\r\n### Username/Password flow\r\n\r\nTo request an access token and other oauth information using the\r\nusername and password flow, use the `authenticate()` method and pass\r\nin your username, password and security token in the options.\r\n\r\n**Note:** A security token can be generated from the Salesforce\r\ndashboard under: Account Name > Setup > My Personal Information >\r\nReset My Security Token.\r\n\r\n```js\r\nvar username      = 'my_test@gmail.com',\r\n    password      = 'mypassword',\r\n    securityToken = 'some_security_token',\r\n    oauth;\r\n\r\norg.authenticate({ username: username, password: password, securityToken: securityToken }, function(err, resp){\r\n  if(!err) {\r\n    console.log('Access Token: ' + resp.access_token);\r\n    oauth = resp;\r\n  } else {\r\n    console.log('Error: ' + err.message);\r\n  }\r\n});\r\n```\r\n\r\nThe Salesforce website suggests appending the security token to the\r\npassword in order to authenticate. This works, but using the\r\n`securityToken` parameter as shown above is cleaner. Here's why the\r\nsecurity token is necessary, from the [Salesforce Website][sf]:\r\n\r\n> The security token is an automatically generated key that must be\r\nadded to the end of the password in order to log in to Salesforce\r\nfrom an untrusted network. You must concatenate their password and\r\ntoken when passing the request for authentication.\r\n\r\n[sf]: http://help.salesforce.com/apex/HTViewHelpDoc?id=remoteaccess_oauth_username_password_flow.htm&language=en_US\r\n\r\n### Web Server Code Flow\r\n\r\nTo perform an authorization code flow, first redirect users to the\r\nAuthorization URI at Salesforce. **nforce** provides a helper\r\nfunction to build this url for you.\r\n\r\n```js\r\norg.getAuthUri();\r\n```\r\n\r\nAn example of using this function in a typical node route would be:\r\n\r\n```js\r\napp.get('/auth/sfdc', function(req,res){\r\n  res.redirect(org.getAuthUri());\r\n});\r\n```\r\n\r\nOnce you get a callback at the Redirect URI that you specify, you\r\nneed to request your access token and other important oauth\r\ninformation by calling\r\n`authenticate()` and passing in the \"code\" that you received.\r\n\r\n```js\r\nvar oauth;\r\n\r\norg.authenticate({ code: 'SOMEOAUTHAUTHORIZATIONCODE' }, function(err, resp){\r\n  if(!err) {\r\n    console.log('Access Token: ' + resp.access_token);\r\n    oauth = resp;\r\n  } else {\r\n    console.log('Error: ' + err.message);\r\n  }\r\n});\r\n```\r\n\r\nAn example of using this function in a typical node route and populating the code from the request would be:\r\n\r\n```js\r\napp.get('/auth/sfdc/callback', function(req, res) {\r\n  org.authenticate({code: req.query.code}, function(err, resp){\r\n    if(!err) {\r\n      console.log('Access Token: ' + resp.access_token);\r\n    } else {\r\n      console.log('Error: ' + err.message);\r\n    }\r\n  });\r\n});\r\n```\r\n\r\n### User-Agent Flow\r\n\r\nThe user-agent flow simply redirects to your `redirectUri` after the\r\nuser authenticates and logs in. The `getAuthUri()` method can be\r\nused similar to the Web Server flow but a responseType property must\r\nbe set to `token`.\r\n\r\n```js\r\norg.getAuthUri({ responseType: 'token' });\r\n```\r\n\r\n### OAuth Object\r\n\r\nAt the end of a successful authorization, you a returned an OAuth\r\nobject fo the user. This object contains your salesforce access\r\ntoken, endpoint, id, and other information.  If you have `mode` set\r\nto `multi`, cache this object for the user as it will be used for\r\nsubsequent requests. If you are in `single` user mode, the OAuth\r\nobject is stored as a property on your salesforce connection object.\r\n\r\n### OAuth Object De-Coupling (Multi-user mode)\r\n\r\n**nforce** decouples the oauth credentials from the connection\r\nobject when `mode` is set to `multi` so that in a multi-user\r\nsituation, a separate connection object doesn't need to be created\r\nfor each user. This makes the\r\nmodule more efficient. Essentially, you only need one connection\r\nobject for multiple users and pass the OAuth object in with the\r\nrequest. In this scenario, it makes the most sense to store the\r\nOAuth credentials in the users session or in some other data store.\r\nIf you are using [express](https://github.com/visionmedia/express),\r\n**nforce** can take care of storing this for you (see Express\r\nMiddleware).\r\n\r\n### Integrated OAuth Object (Single-user mode)\r\n\r\nIf you specified `single` as your `mode` when creating the\r\nconnection, calling authenticate will store the OAuth object within\r\nthe connection object. Then, in subsequent API requests, you can\r\nsimply omit the OAuth object from the request like so.\r\n\r\n```js\r\n// look ma, no oauth argument!\r\norg.query({ query: 'SELECT Id FROM Lead LIMIT 1' }, function(err, res) {\r\n  if(err) return console.error(err);\r\n  else return console.log(res.records[0]);\r\n});\r\n```\r\n\r\n### Access Token Auto-Refreshes\r\n\r\n**nforce** provides an optional, built-in function for\r\nauto-refreshing access tokens when able it's able to. This requires\r\nyou are using the web-server flow and you've requested the right\r\nscope that returns you a refresh_token. The username/password flow\r\nis also supported if using single-user mode.\r\n\r\nTo enable auto-refreshes, you just need to set the `autoRefresh`\r\nargument when creating your connection...\r\n\r\n```js\r\nvar nforce = require('nforce');\r\n\r\nvar org = nforce.createConnection({\r\n  clientId: 'SOME_OAUTH_CLIENT_ID',\r\n  clientSecret: 'SOME_OAUTH_CLIENT_SECRET',\r\n  redirectUri: 'http://localhost:3000/oauth/_callback',\r\n  apiVersion: 'v29.0',\r\n  environment: 'production',\r\n  mode: 'multi',\r\n  autoRefresh: true // <--- set this to true\r\n});\r\n```\r\n\r\nNow when you make requests and your access token is expired,\r\n**nforce** will automatically refresh your access token from\r\nSalesforce and re-try your original request...\r\n\r\n```js\r\nconsole.log('old token: ' + oauth.access_token);\r\norg.query({ query: 'SELECT Id FROM Account LIMIT 1', oauth: oauth }, function(err, records){\r\n  if(err) throw err;\r\n  else {\r\n    console.log('query completed with token: ' + oauth.access_token); // <--- if refreshed, this should be different\r\n    res.send(body);\r\n  }\r\n});\r\n```\r\n\r\n**NOTE:** If you're using express and storing your oauth in the\r\nsession, if you pass in your session oauth directly, it's going to\r\nbe updated automatically by nforce since the autoRefresh function\r\nmutates the oauth object that's\r\npassed in.\r\n\r\nThere's also a handy callback function called `onRefresh` that can\r\nbe added to your connection that will execute when any request\r\ntriggers an auto-refresh of your access token. This makes keeping\r\nstored credentials up-to-date a breeze. Here's a pseudo-example of\r\nhow that would work.\r\n\r\n```js\r\nvar nforce = require('nforce');\r\n\r\nvar org = nforce.createConnection({\r\n  clientId: 'SOME_OAUTH_CLIENT_ID',\r\n  clientSecret: 'SOME_OAUTH_CLIENT_SECRET',\r\n  redirectUri: 'http://localhost:3000/oauth/_callback',\r\n  apiVersion: 'v29.0',\r\n  environment: 'production',\r\n  mode: 'multi',\r\n  autoRefresh: true, // <--- set this to true\r\n  onRefresh: function(newOauth, oldOauth, cb) {\r\n    // find outdated access tokens in the db and update them\r\n    mydb.findOauthByAccessToken(oldOauth.access_token, function(err, oauth) {\r\n      oauth.access_token = newOauth.access_token;\r\n      oauth.save();\r\n      // make sure you call the callback from the onRefresh function\r\n      cb();\r\n    });\r\n  }\r\n});\r\n```\r\n\r\n## Other Features\r\n\r\n### Force.com Streaming API Support\r\n\r\n**nforce** supports the Force.com Streaming API. Connecting to one of\r\nyour PushTopics is easy using nforce. Here's how you create a\r\nstreaming client and subscribe to a PushTopic.\r\n\r\n```js\r\norg.authenticate({ username: user, password: pass }, function(err, oauth) {\r\n\r\n  if(err) return console.log(err);\r\n\r\n  var client = org.createStreamClient();\r\n\r\n  console.log('subscribing to ' + logs._topic);\r\n  var accs = client.subscribe({ topic: 'NewAccounts' });\r\n\r\n  accs.on('error', function(err) {\r\n    console.log('subscription error');\r\n    console.log(err);\r\n    client.disconnect();\r\n  });\r\n\r\n  accs.on('data', function(data) {\r\n    console.log(data);\r\n  });\r\n\r\n});\r\n```\r\n\r\nThere is also a short-hand method for creating a client and a\r\nsubscription right from your nforce connection object. You can\r\naccess the underlying client from the subscription object.\r\n\r\n```js\r\nvar accs = org.subscribe({ topic: 'NewAccounts' });\r\n\r\n// close the client after 5 seconds\r\nsetTimeout(function(){\r\n  accs.client.disconnect();\r\n}, 5000);\r\n```\r\n\r\nWhen you are done with your subscription you can close it. You can\r\nalso disconnect the client connection.\r\n\r\n```js\r\naccs.cancel();\r\nclient.disconnect();\r\n```\r\n\r\n### Plugins\r\n\r\nAs of **nforce** v0.7.0, a plugin API is now exposed so that the\r\ncapabilities of nforce can easily be extended. This plugin system\r\nalso allows the core of nforce to remain small, handling mostly\r\nauthentication, CRUD, query, search,and other basic API requests.\r\nAs Salesforce releases additional API's or as authors find\r\ninteresting ways to extend nforce, these can easily be built into\r\nplugins and added to your nforce configuration as-needed.\r\n\r\nTo use plugins in your application, you'll need to load them\r\ninto nforce and specify which plugins to use when creating a\r\nconnection object. Here is an example.\r\n\r\n```js\r\nvar nforce = require('nforce');\r\n\r\n// load the plugin\r\nrequire('myplugin')(nforce);\r\n\r\nvar org = nforce.createConnection({\r\n  clientId:     process.env.CLIENT_ID,\r\n  clientSecret: process.env.CLIENT_SECRET,\r\n  redirectUri: 'http://localhost:3000/oauth/_callback',\r\n  plugins:     ['myplugin'] // make sure you enable it when creating a connection\r\n});\r\n\r\norg.myplugin.getSomeData(function(err, data) {\r\n  console.log(data);\r\n});\r\n```\r\n\r\nYou'll notice that the plugins methods are all namespaced. This is\r\nto prevent method naming conflicts between plugins. As a\r\nbest-practice, plugin authors should make their namespace the same\r\nas the module name but it's best to refer\r\nto their documentation for the exact namespace when using their\r\nplugin.\r\n\r\nHere is a list of some available plugins today:\r\n\r\n* [nforce-tooling](https://github.com/jeffdonthemic/nforce-tooling) Tooling API support\r\n* [nforce-chatter](https://github.com/jeffdonthemic/nforce-chatter) Chatter API support\r\n* [nforce-metadata](https://github.com/kevinohara80/nforce-metadata) Metadata API support\r\n* [nforce-express](https://github.com/kevinohara80/nforce-express) Express.js plugin for\r\nOAuth authentication helpers\r\n\r\nDocumentation on authoring plugins is coming soon...\r\n\r\n## nforce API Basics\r\n\r\n### Callbacks\r\n\r\nThe API of **nforce** follows typical node.js standards. Callbacks\r\nwill always pass an optional error object, and a response object. The\r\nresponse object closely resembles the typical responses from the\r\nSalesforce REST API.\r\n\r\n```js\r\nvar myCallback = function(err, resp);\r\n\r\norg.getUrl(url, myCallback);\r\n```\r\n\r\n### Promises\r\n\r\n**nforce** also supports promises based on\r\n[Bluebird](https://github.com/petkaantonov/bluebird). When no\r\ncallback is supplied to an asynchronous method (like an api call),\r\na promise will be returned. This makes control-flow very simple.\r\n\r\n```js\r\norg.authenticate({ username: un, password: pw }).then(function(){\r\n  return org.getResources();\r\n}).then(function(resources) {\r\n  console.log('resources: ' + resources);\r\n}).error(function(err) {\r\n  console.error('there was a problem');\r\n});\r\n```\r\n\r\n## nforce Base Methods\r\n\r\n### createConnection(opts)\r\n\r\nThe createConnection method creates an *nforce* salesforce connection\r\nobject.\r\nYou need to supply some arguments including oauth information and\r\nsome optional arguments for version and salesforce environment type.\r\n\r\n* `clientId`: (String:Required) This is the OAuth client id\r\n* `clientSecret`: (String:Required) This is the OAuth client secret\r\n* `redirectUri`: (String:Required) This is the redirect URI for OAuth\r\ncallbacks\r\n* `apiVersion`: (String|Number:Required) This is a number or string\r\nrepresenting a valid REST API version. Default is the latest current\r\napi version.\r\n* `environment`: (String:Optional) Values can be 'production' or\r\n'sandbox'.\r\nDefault is production.\r\n* `authEndpoint`: (String:Optional) Used to override the\r\nauthentication endpoint for production environments.\r\n* `testAuthEndpoint`: (String:Optional) Used to override the\r\nauthentication endpoint for production environments.\r\n* `loginUri`: (String:Optional) Used to override the login URI if\r\nneeded.\r\n* `testLoginUri`: (String:Optional) Used to override the testLoginUri\r\nif needed.\r\n* `gzip`: (Boolean:Optional) If set to boolean 'true', then *nforce*\r\nwill request that salesforce compress responses (using gzip) before\r\ntransmitting over-the-wire.\r\n* `autoRefresh`: (Boolean:Optional) If set to boolean 'true',\r\n*nforce* will auto-refresh your oauth access token if it tries a\r\nrequest and fails due to an expired token. Only works with web oauth\r\nand username/password flows.\r\n* `onRefresh`: (Function:Optional) This is a function that is called\r\nwhen a request going through the connection triggers an auto-refresh.\r\nThis hook is handy for updating your oauth tokens in a database or\r\nother store. The function is passed three arguments `newOauth`,\r\n`oldOauth`, and a `callback`\r\nfunction. The callback must be called with either an error or null\r\nvalue.\r\n* `timeout`: (Number:Optional) Integer containing the number of\r\nmilliseconds\r\nto wait for a request to respond before aborting the request.\r\n* `username`: (String:Optional) The username to be used\r\nfor the connection (single-user mode only)\r\n* `password`: (String:Optional) The password to be used\r\nfor the connection (single-user mode only)\r\n* `securityToken`: (String:Optional) The security token to be used\r\nfor the connection (single-user mode only)\r\n* `oauth`: (Object:Optional) The oauth object to be used for the\r\nconnection (single-user mode only)\r\n\r\n### createSObject(type, [fieldValues])\r\n\r\nThis creates an sObject record that you can use to insert, update,\r\nupsert, and delete. `type` should be the salesforce API name of the\r\nsObject that you are updating. `fieldValues` should be a hash of\r\nfield names and values that you want to initialize your sObject with.\r\nYou can also just assign fields and values by setting properties\r\nafter you create the sObject.\r\n\r\n## plugin(namespace|opts)\r\n\r\nThis creates an nforce plugin. Plugins allow you to extend the\r\nfunctionality of nforce. You need to initialize the plugin with a\r\n`namespace` or an options hash containing a namespace. Valid options\r\ninclude:\r\n\r\n* `namespace`: (String:Required) This sets the namespace for your\r\nplugin\r\n* `override`: (Boolean:Optional) Override *true* allows you to\r\noverwrite an existing plugin. Default is false.\r\n\r\n## Salesforce sObject Methods\r\n\r\n### get(field)\r\n\r\nGet the value of a field on the sObject\r\n\r\n### set(field, value) OR set(hash)\r\n\r\nSet the value of a single field (field, value) or set multiple\r\nfields using a hash.\r\n\r\n### getId()\r\n\r\nGet the Id of the sObject\r\n\r\n### setId(id)\r\n\r\nSet the Id of the sObject\r\n\r\n### getType()\r\n\r\nReturns the sObject type in lowercase\r\n\r\n### isType(type)\r\n\r\nChecks the type of the sObject and returns true|false\r\n\r\n### getExternalId()\r\n\r\nReturns the external id that is currently set\r\n\r\n### getExternalIdField()\r\n\r\nReturns the external id field that is currently set\r\n\r\n### setExternalId(field, value)\r\n\r\nFor upsert methods, you need to specify the External Id field and the\r\nvalue that you are trying to match on.\r\n\r\n### getAttachment()\r\n\r\nReturns the attachment object if set\r\n\r\n### setAttachement(fileName, body)\r\n\r\nSets the fileName (String) and body (buffer) for an attachment\r\n\r\n### getFileName()\r\n\r\nReturns the file name of the attachment if set\r\n\r\n### setFileName(fileName)\r\n\r\nSets the file name of the attachment\r\n\r\n### getBody\r\n\r\nGets the body of the attachment if set\r\n\r\n### setBody\r\n\r\nSets the body of the attachment\r\n\r\n### hasChanged(field)\r\n\r\nChecks to see if the field has been changed since the last save on\r\nthe server\r\n\r\n### changed()\r\n\r\nReturns a hash of the changed fields and their current values\r\n\r\n### previous()\r\n\r\nReturns a hash of the previous values for changed fields\r\n\r\n### toJSON()\r\n\r\nReturns a JSON representation of the fields in the sObject\r\n\r\n## Connection Methods\r\n\r\nThe following list of methods are available for an **nforce**\r\nconnection object.\r\n\r\nPlease note that you may pass custom `headers` to any of the requests\r\nthat support an `opts` hash. Here is an example:\r\n\r\n```js\r\nvar headers = {\r\n  'sforce-auto-assign': '1'\r\n};\r\n\r\norg.insert({ oauth: oauth, sobject: so, headers: headers }, function(err, record) {\r\n  // callback\r\n});\r\n```\r\n\r\n### getAuthUri([opts])\r\n\r\nThis is a helper method to build the authentication uri for a\r\nauthorization code OAuth 2.0 flow. You can optionally pass in an\r\nOAuth options argument. The supported options are:\r\n* `responseType`: (String:Optional) Any valid response_type that is\r\nsupported by Salesforce OAuth 2.0. Default is `code`.\r\n* `authEndpoint`: (String:Optional) Override the auth endpoint to\r\nuse for the token request\r\n* `display`: (String:Optional) Tailors the login page to the user's\r\ndevice type. Currently the only values supported are `page`,\r\n`popup`, and `touch`\r\n* `immediate`: (Boolean:Optional) Avoid interacting with the user.\r\nDefault is false.\r\n* `scope`: (Array:Optional) The scope parameter allows you to\r\nfine-tune what the client application can access. Supported values\r\nare `api`, `chatter_api`,\r\n`full`, `id`, `refresh_token`, `visualforce`, and `web`\r\n* `state`: (String:Optional) Any value that you wish to be sent\r\nwith the callback\r\n* `nonce`: (String:Optional) Optional with the openid scope for\r\ngetting a user ID token\r\n* `prompt`: (String|Array:Optional) Specifies how the authorization\r\nserver\r\nprompts the user for re-authentication and reapproval. Values are\r\n`login`,\r\n`consent` or both in the form of an array.\r\n* `loginHint`: (String:Optional) Provide a valid username value with\r\nthis parameter to pre-populate the login page with the username.\r\n* `urlOpts`: (Object:Optional) Specify any other url arguments to\r\ninclude in the request.\r\n\r\n### authenticate(opts, [callback])\r\n\r\nThis method requests the OAuth access token and instance information\r\nfrom Salesforce or Force.com. This method either requires that you\r\npass in the authorization code (authorization code flow), username and\r\npassword (username/password flow), or a SAML assertion (SAML Bearer\r\nAssertion Flow).\r\n\r\n* `code`: (String:Optional) An OAuth authorization code\r\n* `username`: (String:Optional) Your\r\nsalesforce/force.com/database.com username\r\n* `password`: (String:Optional) Your\r\nsalesforce/force.com/database.com password\r\n* `securityToken`: (String:Optional) Your Salesforce security token.\r\nThis will be appended to your password if this property is set.\r\n* `assertion`: (String:Optional) A base64-encoded SAML assertion used\r\nin a SAML Bearer Assertion flow.\r\n* `executeOnRefresh`: (Boolean:Optional) If an onRefresh callback is\r\ndefined\r\nin the connection, run the callback. Default is false.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n### refreshToken(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `assertion`: (String:Optional) A base64-encoded SAML assertion for use\r\nwith the SAML Bearer Assertion Flow. The assertion can also be supplied as\r\nproperty of the `oauth` hash.\r\n* `executeOnRefresh`: (Boolean:Optional) If an onRefresh callback is\r\ndefined\r\nin the connection, run the callback. Default is true.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n### revokeToken(opts|token, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in multi-user\r\nmode\r\n* `token`: (String:Required) The oauth access_token or refresh_token\r\nyou want to revoke\r\n* `callbackParam`: (String:Optional) A callback parameter to be\r\nsupplied to the request for JSONP support\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n### getPasswordStatus(opts|id, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in multi-user\r\nmode\r\n* `id`: (String:Optional) The id of the User. Required only if\r\n`sobject` is not defined\r\n* `sobject`: (String:Optional) The user sobject. Required only if\r\n`id` is not defined.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n### updatePassword(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `newPassword`: (String:Required) The new password to be set for\r\nthe user.\r\n* `id`: (String:Optional) The id of the User. Required only if\r\n`sobject` is\r\nnot defined.\r\n* `sobject`: (String:Optional) The user sobject. Required only if\r\n`id` is not\r\ndefined.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n## getIdentity(opts, [callback])\r\n\r\nopts:\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\n### getVersions([callback])\r\n\r\nopts:\r\n\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGets the salesforce versions. Note: Does not require authentication.\r\n\r\n### getResources(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGets the available salesforce resources\r\n\r\n### getSObjects(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet all sObjects for an org\r\n\r\n### getMetadata(opts|type, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `type`: (String:Required) The metadata type that is being requested\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet metadata for a single sObject. `type` is a required String\r\nfor the sObject type\r\n\r\n### getDescribe(opts|type, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `type`: (String:Required) The metadata type that is being requested\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet describe information for a single sObject. `type` is a required\r\nString for the sObject type\r\n\r\n### insert(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Required) An sObject instance\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nInsert a record.\r\n\r\n### update(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Required) An sObject instance\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nUpdate a record.\r\n\r\n### upsert(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Required) An sObject instance\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nUpdate a record. NOTE: you must use the setExternalId() method to set\r\nthe external Id field and the value to match on.\r\n\r\n### delete(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Required) An sObject instance\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nDelete a record.\r\n\r\n### getRecord(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Optional) An sObject instance.\r\n* `fields`: (Array:Optional) An array of fields to return\r\n* `type:`: (String:Optional) A string value sObject type\r\n* `id`: (String:Optional) A string value for the sObject record id\r\n* `raw`: (Boolean:Optional) Tells nforce to return the raw\r\nresponse from Salesforce and skip the SObject wrapping. Default\r\nis false.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet a single record. You must supply either an `sobject` or `type`\r\nand `id`\r\n\r\n### getBody(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Optional) An sObject instance.\r\n* `type:`: (String:Optional) A string value sObject type\r\n* `id`: (String:Optional) A string value for the sObject record id\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet the binary data for an attachment, document, or contentversion.\r\nYou must supply either an `sobject` or `type` and `id`. The `sobject`\r\nmust be one of those three types.\r\n\r\n### getAttachmentBody(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Optional) An sObject instance.\r\n* `id`: (String:Optional) A string value for the sObject record id\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet the binary data for an attachment. You must supply either an\r\n`sobject` or an `id`.\r\n\r\n### getDocumentBody(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Optional) An sObject instance.\r\n* `id`: (String:Optional) A string value for the sObject record id\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet the binary data for a document. You must supply either an\r\n`sobject` or an `id`.\r\n\r\n### getContentVersionBody(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `sobject`: (Object:Optional) An sObject instance.\r\n* `id`: (String:Optional) A string value for the sObject record id\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet the binary data for a contentversion. You must supply either\r\nan `sobject` or an `id`.\r\n\r\n### query(opts|query, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `query`: (String:Required) An query string\r\n* `includeDeleted`: (Boolean:Optional) Query also deleted records.\r\nDefault is false.\r\n* `raw`: (Boolean:Optional) Tells nforce to return the raw\r\nresponse from Salesforce and skip the SObject wrapping.\r\nDefault is false.\r\n* `fetchAll`: (Boolean:Optional) Specifying fetchAll to true tells\r\nnforce to recursively query to get all possible returned records.\r\nDefault is false.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nExecute a SOQL query for records.\r\n\r\n### queryAll(opts|query, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `query`: (String:Required) An query string\r\n* `raw`: (Boolean:Optional) Tells nforce to return the raw response\r\nfrom Salesforce and skip the SObject wrapping. Default is false.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nSame as query but includes deleted records.\r\n\r\n### search(opts|search, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `search`: (String:Required) An search string\r\n* `raw`: (Boolean:Optional) Tells nforce to return the raw response\r\nfrom Salesforce and skip the SObject wrapping. Default is false.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nExecute a SOSL search for records. `search` should be a SOSL string.\r\n\r\n### getUrl(opts|url, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `url`: (String:Required) An url string for an api resource\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nGet a REST API resource by its url.\r\n\r\n### createStreamClient(opts)\r\n\r\nopts:\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `timeout`: (Integer:Optional) The timeout in seconds to pass to\r\nthe Faye client\r\n* `retry`: (Integer:Optional) The retry interval to pass to the\r\nFaye client\r\n\r\nCreates and returns a streaming api client object. See the *Streaming\r\nClient* section for more details on the client object that is\r\nreturned from this method.\r\n\r\n### subscribe|stream(opts)\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `topic`: (String:Required) An string value for the streaming topic\r\n* `isSystem`: (Boolean:Optional) Specify `true` if the topic to be\r\nstreamed is a SystemTopic\r\n* `timeout`: (Integer:Optional) The timeout in seconds to pass to\r\nthe Faye client\r\n* `retry`: (Integer:Optional) The retry interval to pass to the\r\nFaye client\r\n\r\nCreates and returns a streaming api subscription object. See the\r\n*Streaming Subscription* section for more details on the\r\nsubscription object that is returned from this method.\r\n\r\n### apexRest(opts|uri, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `uri`: (String:Required) A string value for endpoint. Should\r\nnot include '/services/apexrest'\r\n* `method`: (String:Optional) String method that defaults to GET if\r\nnot supplied\r\n* `urlParams`: (Object|String:Optional) A hash or url params to\r\nadd to the request\r\n* `body`: (Object:Optional) The optional JSON body for the request.\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nThis method handles integration with salesforce ApexRest\r\n(Custom Rest endpoints)\r\nhttp://wiki.developerforce.com/page/Creating_REST_APIs_using_Apex_REST\r\n\r\n## autoRefreshToken(opts, [callback])\r\n\r\nopts:\r\n\r\n* `oauth`: (Object:Optional) The oauth object. Required in\r\nmulti-user mode\r\n* `requestOpts`: (Object:Optional) Optional hash of parameters to\r\npass to the underlying request.\r\n\r\nAuto-refresh the current access token. Works with refresh tokens\r\nand also if using username/password in single user mode\r\n\r\n## Streaming Client\r\n\r\nThe streaming Client object represents a streaming client created\r\nfrom the connections `createStreamClient()` method. The Streaming\r\nClient emits several events:\r\n\r\nevents:\r\n\r\n* `connect`: Emits when the clients transport is up\r\n* `disconnect`: Emits when the clients transport is down\r\n\r\n### subscribe(opts)\r\n\r\nopts:\r\n\r\n* `topic`: (String:Required) An string value for the streaming topic\r\n* `isSystem`: (Boolean:Optional) Specify `true` if the topic to be\r\nstreamed is a SystemTopic\r\n\r\nCreates and returns a streaming api subscription object. See the\r\n*Streaming Subscription Methods* section for more details on the\r\nsubscription object.\r\n\r\n### disconnect()\r\n\r\nDisconnects the streaming client and will close all subscriptions\r\n\r\n## Streaming Subscription\r\n\r\nThe Subscription object represents a subscription created from the\r\nstreaming Client by calling `client.subscribe()`. This object emits\r\nseveral events.\r\n\r\nevents:\r\n\r\n* `connect`: Emits when the subscription becomes active.\r\n* `error`: Emits an error object when the subscription encounters\r\nan error\r\n* `data`: Emits a data object when the subscription receives an event\r\n\r\n### cancel()\r\n\r\nCancels the subscription. This does not close the client.\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/kevinohara80/nforce.git"
  },
  "scripts": {
    "test": "./node_modules/mocha/bin/mocha ./test --reporter spec"
  },
  "version": "1.3.3"
}
